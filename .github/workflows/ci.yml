# 🚀 CI/CD Pipeline - Build & Test
name: CI - Build and Test

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  JAVA_VERSION: '21'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ================================
  # JOB 1: Code Quality & Security
  # ================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

    - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v3
      with:
        gradle-version: wrapper

    - name: 🔍 Run ktlint
      run: |
        cd apps
        ./gradlew ktlintCheck --continue

    - name: 🛡️ Run Detekt
      run: |
        cd apps  
        ./gradlew detekt --continue

    - name: 📊 Cache SonarQube packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: 🔬 SonarQube Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          cd apps
          ./gradlew sonar \
            -Dsonar.projectKey=${{ github.repository_owner }}_aws-eks-msk-starter \
            -Dsonar.organization=${{ github.repository_owner }} \
            -Dsonar.host.url=https://sonarcloud.io
        else
          echo "⚠️ SONAR_TOKEN not configured, skipping SonarQube scan"
        fi

    - name: 🔐 Run Dependency Check
      run: |
        cd apps
        ./gradlew dependencyCheckAnalyze --continue

    - name: 📋 Upload Dependency Check Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dependency-check-report
        path: apps/build/reports/dependency-check-report.html

  # ================================
  # JOB 2: Unit Tests
  # ================================ 
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        module: [producer, consumer, aggregator]
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🧪 Run Unit Tests - ${{ matrix.module }}
      run: |
        cd apps/${{ matrix.module }}
        ../gradlew test --continue

    - name: 📊 Generate Test Report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 📋 Test Results - ${{ matrix.module }}
        path: apps/${{ matrix.module }}/build/test-results/test/*.xml
        reporter: java-junit

    - name: 📈 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: apps/${{ matrix.module }}/build/reports/jacoco/test/jacocoTestReport.xml
        flags: ${{ matrix.module }}
        name: codecov-${{ matrix.module }}

    - name: 📋 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.module }}
        path: |
          apps/${{ matrix.module }}/build/test-results/
          apps/${{ matrix.module }}/build/reports/

  # ================================
  # JOB 3: Integration Tests
  # ================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: s3,dynamodb,sqs,sns
          DEFAULT_REGION: us-east-1
          
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🐘 Setup Gradle  
      uses: gradle/gradle-build-action@v3

    - name: 🐳 Start TestContainers Services
      run: |
        docker run -d --name kafka-test \
          -p 9092:9092 \
          confluentinc/cp-kafka:latest \
          /bin/sh -c "
            export KAFKA_ZOOKEEPER_CONNECT=localhost:2181 && \
            export KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 && \
            export KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 && \
            /etc/confluent/docker/run
          " || echo "Using TestContainers instead"

    - name: 🔗 Run Integration Tests
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_DEFAULT_REGION: us-east-1
        LOCALSTACK_ENDPOINT: http://localhost:4566
      run: |
        cd apps
        ./gradlew integrationTest --continue

    - name: 📋 Upload Integration Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          apps/build/test-results/integrationTest/
          apps/build/reports/tests/integrationTest/

  # ================================
  # JOB 4: Build Docker Images
  # ================================
  build-images:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      
    strategy:
      matrix:
        app: [producer, consumer, aggregator]
        
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🏗️ Build Application JAR
      run: |
        cd apps/${{ matrix.app }}
        ../gradlew bootJar --no-daemon

    - name: 🐳 Build and Push Docker Image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: apps/${{ matrix.app }}
        file: apps/${{ matrix.app }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: 🔍 Scan Image for Vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.app }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-results-${{ matrix.app }}.sarif'

    - name: 📋 Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results-${{ matrix.app }}.sarif'

  # ================================
  # JOB 5: Performance Tests
  # ================================
  performance-tests:
    name: 🚀 Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🚀 Run Performance Tests
      run: |
        cd tests
        echo "Running performance tests..."
        # Add performance test execution here

    - name: 📊 Upload Performance Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: tests/performance-results/

  # ================================
  # JOB 6: Security Scan
  # ================================
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔍 Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: java

    - name: ☕ Setup JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: 🐘 Setup Gradle
      uses: gradle/gradle-build-action@v3

    - name: 🏗️ Build for Analysis
      run: |
        cd apps
        ./gradlew build -x test

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # ================================
  # JOB 7: Deployment Validation
  # ================================
  validate-deployment:
    name: ✅ Validate Deployment
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    
    steps:
    - name: 📂 Checkout Code
      uses: actions/checkout@v4

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: 🔧 Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: ✅ Validate Kubernetes Manifests
      run: |
        kubectl --dry-run=client apply -f k8s/

    - name: ✅ Lint Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: 🔍 Terraform Validate
      run: |
        cd terraform
        terraform init -backend=false
        terraform validate
        terraform fmt -check

    - name: 📋 Generate Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Image |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Producer | ✅ Ready | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-producer:${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Consumer | ✅ Ready | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-consumer:${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
        echo "| Aggregator | ✅ Ready | \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-aggregator:${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY

  # ================================
  # JOB 8: Notification
  # ================================
  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, build-images, security-scan, validate-deployment]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: ${{ needs.code-quality.result == 'success' && needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.build-images.result == 'success' }}
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#ci-cd'
        text: |
          ✅ CI Pipeline Success!
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.workflow }}
          
          All tests passed and images built successfully! 🎉
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: 📢 Notify Failure
      if: ${{ needs.code-quality.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.build-images.result == 'failure' }}
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#ci-cd'
        text: |
          ❌ CI Pipeline Failed!
          
          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          **Workflow:** ${{ github.workflow }}
          
          Please check the workflow logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
